<?xml version="1.0" encoding="RAW"?>
<Export generator="Cache" version="25">
<Class name="XPort.API">
<Super>Frontier.Router</Super>
<TimeCreated>64583,57726.057897</TimeCreated>

<XData name="UrlMap">
<XMLNamespace>http://github.com/rfns/xport</XMLNamespace>
<Data><![CDATA[
<Routes>
<Route Url="/ping" Method="HEAD" UseAuth="false" Call="Ping"/>
<Map Prefix="/namespaces/:namespace/projects" Forward="XPort.API.Projects"/>
<Map Prefix="/namespaces/:namespace/documents" Forward="XPort.API.Documents"/>
</Routes>
]]></Data>
</XData>

<Method name="OnSetup">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  #dim %frontier As Frontier.Context

  // Disables path normalization and tries to resolve using the received path syntax.
  set ^||Port.Internals.Configuration("remote") = 1

  set %frontier.PropertyFormatter = ##class(Frontier.PropertyFormatter.SnakeCase).%New()

  set basicStrategy = ##class(Frontier.Authentication.BasicStrategy).%New({
   "realm": "source",
   "validator": ($classname()_":ValidateCredentials")
  })

  do %frontier.CORS.Default()
  $$$QuitOnError(%frontier.AuthenticationManager.AddStrategy(basicStrategy))

  return $$$OK
]]></Implementation>
</Method>

<Method name="ValidateCredentials">
<ClassMethod>1</ClassMethod>
<FormalSpec>login:%String,password:%String,*found:%Boolean=1,*httpStatus:%String,*user:%DynamicObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set found = $System.Security.Login(login, password)
  if 'found {
    set httpStatus = ..#HTTP403FORBIDDEN
    return $$$ERROR($$$InvalidUsernameOrPassword)
  }

  if '$System.Security.CheckUserPermission(login, "%Development", "USE") {
    set httpStatus = ..#HTTP403FORBIDDEN
    return $$$ERROR($$$RequiresRoleForConnection, "%Development")
  }
  return $$$OK
]]></Implementation>
</Method>

<Method name="Ping">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[  return ""
]]></Implementation>
</Method>
</Class>


<Class name="XPort.API.Documents">
<IncludeCode>portutils</IncludeCode>
<Super>Frontier.Router</Super>
<TimeCreated>65101,34629.058077</TimeCreated>

<XData name="UrlMap">
<XMLNamespace>http://github.com/rfns/xport</XMLNamespace>
<Data><![CDATA[
<Routes>
<Route Url="/find" Method="GET" UseAuth="true" Call="FindDocuments"/>
<Route Url="/preview/?(.*)?" Strict="false" Method="GET" Call="PreviewDocument" />
<Route Url="/references" Method="GET" Call="GetDocumentReferences" />

</Routes>
]]></Data>
</XData>

<Method name="FindDocuments">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String,pattern:%String,limit:%Integer=50</FormalSpec>
<ReturnType>%DynamicObject</ReturnType>
<Implementation><![CDATA[
  set webAppPath = ##class(Port.Util).FindApplicationWithPhysicalPath(namespace)

  if webAppPath = "" {
    return %frontier.ThrowException("Unable to find a valid web application.")
  }

  set s = ##class(%SQL.Statement).%New()
  $$$ThrowOnError(s.%PrepareClassQuery("%RoutineMgr", "StudioOpenDialog"))
  set c = s.%Execute(pattern,,,1,1)

  set matches = []
  set hits = 0

  while c.%Next(.sc) {
    $$$ThrowOnError(sc)

    if hits > limit quit
    set hits = hits + 1

    set name = c.%Get("Name")
    set type = c.%Get("type")

    if type = 9 || (type = 7) continue

    do matches.%Push(name)
  }

  return {
    "webAppPath": (webAppPath),
    "matches": (matches)
  }
]]></Implementation>
</Method>

<Method name="PreviewDocument">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String</FormalSpec>
<ReturnType>%DynamicObject</ReturnType>
<Implementation><![CDATA[
  set item = $replace("/"_%frontier.Matches(1), ##class(Port.Util).FindApplicationWithPhysicalPath(namespace), "")
  $$$ThrowOnError(##class(Port.Util).MountItemNameFromSourcePath(item, .itemName, namespace))
  set code = ##class(XPort.Util.NamespaceCall).RetrieveItemSourceCode(namespace, "", itemName)

  return { "preview": (code) }
]]></Implementation>
</Method>

<Method name="GetDocumentReferences">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String,expression:%String,pattern:%String,includeSystemDocs:%Boolean=1,wholeWords:%Boolean=0,caseSensitive:%Boolean=0,max:%Integer=50,filter:%String="",wild:%Boolean=0</FormalSpec>
<ReturnType>%DynamicObject</ReturnType>
<Implementation><![CDATA[
  set references = []
  $$$ThrowOnError(##class(Frontier.Shared.Utilities).CallAndCapture("%Studio.Project", "FindInFiles", .output, expression, pattern, includeSystemDocs, wholeWords, caseSensitive, max, filter, wild))

  while 'output.AtEnd {
    set line = output.ReadLine()
    if line = "" continue
    do references.%Push(line)
  }
  return { "references": (references) }
]]></Implementation>
</Method>
</Class>


<Class name="XPort.API.Project">
<Super>Frontier.Router</Super>
<TimeCreated>64583,55999.0225</TimeCreated>

<XData name="UrlMap">
<XMLNamespace>http://github.com/rfns/xport</XMLNamespace>
<Data><![CDATA[
<Routes>
<Route Url="/" Method="GET" Call="ListProjects" />
<Route Url="/:project" Method="DELETE" Call="DeleteProject" />
<Route Url="/:project/compile" UseAuth="false" Method="POST" Call="CompileProject" />
<Route Url="/:project/create" Method="POST" Call="CreateProject"/>
<Route Url="/:project/xml" Method="GET" Call="GetProjectXML" />
<Map Prefix="/:project/items" Forward="XPort.API.Project.Items"/>
</Routes>
]]></Data>
</XData>

<Method name="GetProjectXML">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String,project:%Studio.Project</FormalSpec>
<ReturnType>%Stream.Object</ReturnType>
<Implementation><![CDATA[
  if '$isobject(project) return %frontier.ThrowException("A project with the name '"_%frontier.RouteParameters("project")_"' does not exist.")
  $$$ThrowOnError(project.ExportToStream("/nodisplay", 0,.errors,,"UTF8"))
  return project.Stream
]]></Implementation>
</Method>

<Method name="ListProjects">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String</FormalSpec>
<ReturnType>%DynamicArray</ReturnType>
<Implementation><![CDATA[
  set projects = []
  
  set s = ##class(%SQL.Statement).%New()
  $$$ThrowOnError(s.%PrepareClassQuery("%Studio.Project", "ProjectList"))
  set c = s.%Execute()
  
  while c.%Next() {
    set name = c.%Get("Name")
    if name [ "Default" continue
    &sql(SELECT TOP 1 NAME into :item FROM %STUDIO.PROJECTITEM WHERE PROJECT = :name)
    set hasItems = $select(item '= "" : "true", 1: "false")
    do projects.%Push({ "name": (name), "has_items": (hasItems) })
  }
  
  return {
    "projects": (projects)
  }
]]></Implementation>
</Method>

<Method name="DeleteProject">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String,project:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  do ##class(XPort.Util.NamespaceCall).DeleteProject(namespace, project)
  
  return {
    "deleted": true
  }
]]></Implementation>
</Method>

<Method name="CompileProject">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String,project:%String</FormalSpec>
<ReturnType>%DynamicArray</ReturnType>
<Implementation><![CDATA[
 
  set targetClass = "XPort.Util.NamespaceCall"
  set targetMethod = "CompileProject"
  set args = 2
  set args(1) = namespace
  set args(2) = project  
     
  $$$ThrowOnError(##class(Frontier.Shared.Utilities).CallAndCapture(targetClass, targetMethod, .output, args...))
  
  set lines  = []
  
  while 'output.AtEnd {
    do lines.%Push(output.ReadLine())
  }
  
  return { "output": (lines) }
]]></Implementation>
</Method>
</Class>


<Class name="XPort.API.Projects.Actions">
<IncludeCode>xport</IncludeCode>
<Super>Frontier.Router</Super>
<TimeCreated>65106,30387.887561</TimeCreated>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>
  <Route Url="/compile" Method="POST" Call="CompileProject" />
</Routes>
]]></Data>
</XData>

<Method name="CompileProject">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String,project:%String,options:%String="cku",legacySourceControl:%Boolean=0</FormalSpec>
<ReturnType>%DynamicObject</ReturnType>
<Implementation><![CDATA[
  set options = options_"/nodisplayerror"
  $$$CheckLegacySourceControl(legacySourceControl)

  set sc = ##class(Frontier.Shared.Utilities).CallAndCapture("XPort.Util.NamespaceCall", "CompileProject", .output, namespace, project, options)
  $$$ThrowOnError(##class(XPort.Util.DynamicStatus).ToDynamicObject(sc, .error))

  set log = []
  set errors = []

  if $isobject(error) {
    if 'error.%IsA("%DynamicArray") set errors = [(error)]
  }

  if $$$ISOK(sc) && $isobject(output) {
    while 'output.AtEnd {
      set line = output.ReadLine()
      if $extract(line, 1, 2) = ", " set line = $extract(line, 3, *)
      if line '= "" do log.%Push(line)
    }
  }

  return {
    "errors": (errors),
    "log": (log)
  }
]]></Implementation>
</Method>
</Class>


<Class name="XPort.API.Projects">
<IncludeCode>xport</IncludeCode>
<Super>Frontier.Router</Super>
<TimeCreated>65105,55524.872927</TimeCreated>

<XData name="UrlMap">
<XMLNamespace>http://github.com/rfns/xport</XMLNamespace>
<Data><![CDATA[
<Routes>
<Route Url="/" Method="GET" Call="ListProjects" />
<Route Url="/:project" Method="DELETE" Call="DeleteProject" />
<Route Url="/:project/create" Method="POST" Call="CreateProject"/>
<Route Url="/:project/xml" Method="GET" Call="GetProjectXML" />
<Route Url="/:project/compile" Method="POST" Call="CompileProject" />
<Map Prefix="/:project/items" Forward="XPort.API.Projects.Items"/>
</Routes>
]]></Data>
</XData>

<Method name="GetProjectXML">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String,project:%String</FormalSpec>
<ReturnType>%Stream.Object</ReturnType>
<Implementation><![CDATA[  return { "xml": (##class(XPort.Util.NamespaceCall).ExportProjectToXML(namespace, project)) }
]]></Implementation>
</Method>

<Method name="ListProjects">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String</FormalSpec>
<ReturnType>%DynamicObject</ReturnType>
<Implementation><![CDATA[  return ##class(XPort.Util.NamespaceCall).ListProjects(namespace)
]]></Implementation>
</Method>

<Method name="DeleteProject">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String,project:%String</FormalSpec>
<ReturnType>%DynamicObject</ReturnType>
<Implementation><![CDATA[
  do ##class(XPort.Util.NamespaceCall).DeleteProject(namespace, project)

  return {
    "deleted": true
  }
]]></Implementation>
</Method>

<Method name="CompileProject">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String,project:%String,options:%String="cku",legacySourceControl:%Boolean=0</FormalSpec>
<ReturnType>%DynamicObject</ReturnType>
<Implementation><![CDATA[
  set options = options_"/nodisplayerror"
  $$$CheckLegacySourceControl(legacySourceControl)

  set sc = ##class(Frontier.Shared.Utilities).CallAndCapture("XPort.Util.NamespaceCall", "CompileProject", .output, namespace, project, options)
  $$$ThrowOnError(##class(XPort.Util.DynamicStatus).ToDynamicObject(sc, .error))

  set log = []
  set errors = []

  if $isobject(error) {
    if 'error.%IsA("%DynamicArray") set errors = [(error)]
  }

  if $$$ISOK(sc) && $isobject(output) {
    while 'output.AtEnd {
      set line = output.ReadLine()
      if $extract(line, 1, 2) = ", " set line = $extract(line, 3, *)
      if line '= "" do log.%Push(line)
    }
  }

  return {
    "errors": (errors),
    "log": (log)
  }
]]></Implementation>
</Method>
</Class>


<Class name="XPort.API.Projects.Items">
<IncludeCode>portutils,xport</IncludeCode>
<Super>Frontier.Router</Super>
<TimeCreated>65105,55682.252423</TimeCreated>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>
  <Route Url="/source"  Method="POST" Call="GetItems"/>
  <Route Url="/publish" Method="POST" Call="PublishItems"/>
  <Route Url="/remove" Method="POST" Call="RemoveItems"/>
  <Route Url="/delete" Method="POST" Call="DeleteItems"/>
  <Route Url="/paths" Method="GET" Call="GetItemPaths"/>
</Routes>
]]></Data>
</XData>

<Method name="DeleteItems">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String,projectName:%String(ALIAS="project"),items:%DynamicArray</FormalSpec>
<ReturnType>%DynamicObject</ReturnType>
<Implementation><![CDATA[
  set project = ##class(XPort.Util.NamespaceCall).GetProject(namespace, projectName)

  set iSC = $$$OK

  set errorOnDelete = []
  set successOnDelete = []

  for i=0:1:items.%Size() - 1 {
    try {
      set sourcePath = items.%Get(i)
      set workspace = $$$Slash(sourcePath)_projectName
      set sourcePath = workspace_sourcePath

      $$$ThrowOnError(##class(Port.Util).MountItemNameFromSourcePath(sourcePath, .itemName, namespace))
      set type = ##class(Port.Util).ExtractType(sourcePath, workspace)
      if itemName = "" $$$ThrowOnError($$$ERROR($$$GeneralError, "Could not resolve item name using path "_sourcePath))

      set conflicts = ##class(Port.Util).ListConflicts(project.Name, itemName, type)

      if conflicts '= "" {
        $$$ThrowStatus($$$ERROR($$$GeneralError, "Cannot delete the item "_itemName_" because it's associated to another project. Please check if the following projects depend on it: "_$lts(ubiquityList, ", ")))
      }

      if type = "WEB" {
        $$$ThrowOnError(##class(Port.Util).CSPLogicalToPhysicalPath(itemName, .targetAbsolutePath))
        $$$ThrowOnError(##class(XPort.Util.FileRemover).RemoveOne(targetAbsolutePath))
        set itemName = targetAbsolutePath
      } elseif ##class(Port.Util).IsRoutine(itemName) || (type = "CLS") {
        do ##class(%RoutineMgr).Delete(itemName)
      }
      do successOnDelete.%Push(itemName)
    } catch ex {
      set error = ##class(Frontier.Exception).ToDynamicObject(ex)
      set error.itemName = itemName
      do errorOnDelete.%Push(error)
    }
  }

  $$$ThrowOnError(project.Check())
  $$$ThrowOnError(project.%Save())

  set result = {
    "success": (successOnDelete),
    "hasErrors": ($select(errorOnDelete.%Size() > 0 : "true", 1: "false")),
    "failure": {
      "header": "Failed to delete some items: ",
      "items": (errorOnDelete)
    }
  }
  return result
]]></Implementation>
</Method>

<Method name="RemoveItems">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String,project:%String,payload:%DynamicArray</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

  set project = ##class(XPort.Util.NamespaceCall).GetProject(namespace, project)

  set successOnRemove = []
  set errorOnRemove = []

  for i=0:1:payload.%Size() - 1 {
    try {
      set sourcePath = payload.%Get(i)
      $$$ThrowOnError(##class(Port.Util).MountItemNameFromSourcePath(sourcePath, .itemName, namespace))
      $$$ThrowOnError(project.RemoveItem(itemName))
      do successOnRemove.%Push(itemName)
    } catch ex {
      set error = ##class(Frontier.Exception).ToDynamicObject($$$StatusToException(sc)).error
      set error.itemName = itemName
      do errorOnRemove.%Push(error)
    }
  }

  $$$ThrowOnError(project.%Save())

  set result = {
    "success": (successOnRemove),
    "hasErrors": ($select(errorOnRemove.%Size() > 0 : "true", 1: "false")),
    "failure": {
      "header": ("Failed to remove "_errorOnRemove.%Size()_" items"),
      "items": (errorOnRemove)
    }
  }

  return result
]]></Implementation>
</Method>

<Method name="PublishItems">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String,project:%String,payload:%DynamicObject,callLegacySourceControl:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set project = ##class(XPort.Util.NamespaceCall).GetProject(namespace, project, 1)

  set errorOnPublish = []
  set publishedItems = []
  set compileList = ""
  set compileErrors = ""
  set sc = $$$OK

  set warning = ""
  set sc = $$$ERROR($$$GeneralError, "No valid item has been found.")

  if '$isobject(project) {
    set projectName = %frontier.RouteParameters("project")
    set warning = $$$FormatText("Project did not exist so it was created.", projectName)
    set project = ##class(%Studio.Project).%New()
    set project.Name = projectName
  }

  set payloadIterator = payload.items.%GetIterator()

  while payloadIterator.%GetNext(.i, .file) {
    try {
      set sc = $$$OK
      set source = ""
      $$$ThrowOnError(##class(Port.Util).MountItemNameFromSourcePath(file.path, .itemName, namespace))
      set workspace = ##class(Port.Util).ResolveWorkspaceFromPath(file.path)
      set type = ##class(Port.Util).ExtractType(file.path, workspace)
      set fileName = ##class(%File).GetFilename(file.path)

      if itemName = "" {
        $$$ThrowOnError($$$ERROR($$$GeneralError, "Could not resolve the origin '"_file.path_"' to a valid item name. Are you sure that '"_fileName_"' is a valid '"_type_"' type?"))
      }

      set conflicts = ##class(Port.Util).ListConflicts(project.Name, itemName)

      if conflicts '= "" {
        $$$ThrowOnError($$$PERROR($$$CannotSaveConflictingItems, itemName, $lts(ubiquityList), project.Name))
      }

      set itemId = ##class(Port.Util).MountIdFromName(itemName, project.Name)
      set itemExists = project.Items.IsDefined(itemId)
      set itemType = ##class(Port.Util).ResolveItemExtension(itemName)
      set code = file.content

      if '$isobject(code) {
        do %frontier.ThrowException("'content' array was not provided for "_itemName, ..#HTTP200OK)
      }

      set iterator = code.%GetIterator()

      while iterator.%GetNext(.key, .line) {
        set source(0) = key + 1
        set source(source(0)) = line
      }

      do ##class(XPort.Util.NamespaceCall).SetItemLock(namespace, itemName, 1)

      $$$CheckLegacySourceControl(callLegacySourceControl)

      if ##class(Port.Util).IsRoutine(itemName) {
        set routine = ##class(XPort.Util.NamespaceCall).GetRoutine(namespace, itemName)

        $$$ThrowOnError($$WriteToStream(routine.Code))
        $$$ThrowOnError(routine.%Save())

        set compileList(itemName) = ""
      } elseif type = "CLS" {
        // Checks if client is providing correct item name and class definition.
        $$$ThrowOnError($$AssertClassDefinitionMatch(itemName))

        set stream = ##class(%Stream.GlobalCharacter).%New()
        $$$ThrowOnError($$WriteToStream(stream))

        $$$ThrowOnError(##class(%Compiler.UDL.TextServices).SetTextFromStream(namespace, itemName_".CLS", stream))
        set compileList(itemName) = ""
      } else {
        $$$ThrowOnError(##class(Port.Util).CSPLogicalToPhysicalPath(itemName, .physicalPath))
        $$$ThrowOnError(##class(Port.Util).CreateMissingPath(##class(%File).GetDirectory(physicalPath)))

        set remoteFile = ##class(%Stream.FileCharacter).%New()
        set remoteFile.TranslateTable = "UTF8"

        $$$ThrowOnError(remoteFile.LinkToFile(physicalPath))
        $$$ThrowOnError($$WriteToStream(remoteFile))
        $$$ThrowOnError(remoteFile.%Save())

        // Static files are normally not compiled, with the exception of CSP files.
        if type = "CSP" set compileList(itemName) = ""
      }

      if $order(compileList("")) '= "" {
        $$$ThrowOnError(##class(XPort.Util.NamespaceCall).CompileList(namespace, .compileList, payload.compilerOptions))
      }

      set pSC = project.AddItem(itemName)
      if $$$GETERRORCODE(pSC) '= $$$ProjectIncludesPackage {
        // We don't care if class is owned by a package or not, if that's the error we ignore it.
        $$$ThrowOnError(pSC)
      }

      set code = ""

      set code = ##class(XPort.Util.NamespaceCall).RetrieveItemSourceCode(namespace, workspace, itemName)
      $$$ThrowOnError(project.%Save())

      if code '= "" {
        do publishedItems.%Push({
          "name": (itemName),
          "content": (code),
          "path": (file.path)
        })
      }
    } catch ex {
      set error = ##class(Frontier.Exception).ToDynamicObject(ex)
      set error.itemName = itemName
      do errorOnPublish.%Push(error)
    }

    do ##class(XPort.Util.NamespaceCall).SetItemLock(namespace, itemName, 0)
  }

  return {
    "success": (publishedItems),
    "hasErrors": ($select(errorOnPublish.%Size() > 0 : "true", 1: "false")),
    "warning": ($case(warning, "": "null", : warning)),
    "failure": {
      "header": "Failed to publish the following items: ",
      "items": (errorOnPublish)
    }
  }

WriteToStream(stream)
  set sc = $$$OK
  do stream.Clear()

  for i=1:1:source(0) {
    if i '= source(0) || (i = source(0) && ($extract(source(i), *-2, *) = $char(13,10))) {
      $$$ReturnOnError(stream.WriteLine($zstrip(source(i), "*C'W",, $c(10,13,9))))
    } else {
      $$$ReturnOnError(stream.Write($zstrip(source(i), "*C'W",,$c(10,13,9))))
    }
  }
  do stream.Rewind()
  return $$$OK

AssertClassDefinitionMatch(className)
  for c=1:1:source(0) {
    if $$$lcase($extract(source(c), 1, 6)) = "class " {
      set definingClass = $piece(source(c), " ", 2, 2)
      set className = $piece(className, ".", 1, *-1)

      if definingClass '= className {
        // We cannot allow a class that mismatches its own name to be saved.
        return $$$ERROR($$$GeneralError, $$$FormatText("Attempt to define class named '%1' while the file name is '%2'. Both item and class names must match.", definingClass, className))
      }
      return $$$OK
    }
  }
  if c = source(0) return $$$ERROR($$$GeneralError, $$$FormatText("Item '%1' is not a valid class.", className))
  return $$$OK
]]></Implementation>
</Method>

<Method name="GetItemPaths">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String,project:%String</FormalSpec>
<ReturnType>%DynamicArray</ReturnType>
<Implementation><![CDATA[
  set allProjectItems = ##class(XPort.Util.NamespaceCall).GetAllProjectItems(namespace, project)

  set paths = []
  for i=0:1:allProjectItems.%Size() - 1 {
    set item = allProjectItems.%Get(i)
    set externalPath = ##class(Port.Util).MountItemSourcePath(item, "")
    do paths.%Push($extract(externalPath, 2, *))
  }
  return { "paths": (paths) }
]]></Implementation>
</Method>

<Method name="GetItems">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String,project:%String,payload:%DynamicObject</FormalSpec>
<ReturnType>%DynamicObject</ReturnType>
<Implementation><![CDATA[
  set project = ##class(XPort.Util.NamespaceCall).GetProject(namespace, project)

  set result = []
  set code = ""
  set all = 0

  set targets = payload.items

  if '$isobject(targets) {
    return %frontier.ThrowException("'items' array was not provided.")
  }

  if payload.items.%Get(0) = "*" {
    set all = 1
    set payload.items = ##class(XPort.Util.NamespaceCall).GetAllProjectItems(namespace, project.Name)
  }

  set success = []
  set errors = []

  for i=0:1:payload.items.%Size() - 1 {
    try {
      set externalFile = payload.items.%Get(i)
      set itemName = externalFile

      if itemName [ payload.workspacePath {
        $$$ThrowOnError(##class(Port.Util).MountItemNameFromSourcePath(externalFile, .itemName, namespace))
      }

      set externalPath = ##class(Port.Util).MountItemSourcePath(itemName, payload.workspacePath)

      if all || ('all && ##class(Port.Util).ExistsInProject(project.Name, itemName, "", namespace)) {
        set code = ##class(XPort.Util.NamespaceCall).RetrieveItemSourceCode(namespace, payload.workspacePath, itemName)
      } else {
        $$$ThrowStatus($$$ERROR($$$GeneralError, "Item "_itemName_" is not present in the project '"_%frontier.RouteParameters("project")_"' or simply does not exist."))
      }

      do success.%Push({
        "name": (itemName),
        "content": (code),
        "path": (externalPath),
        "fileName": (##class(%File).GetFilename(externalPath))
      })
    } catch ex {
      set error = ##class(Frontier.Exception).ToDynamicObject(ex)
      set error.itemName = itemName
      do errors.%Push(error)
    }
  }

  return {
    "success": (success),
    "hasErrors": ($select(errors.%Size() > 0 : "true", 1: "false")),
    "failure": {
      "header": "Failed to get the sources from the following items: ",
      "items": (errors)
    }

  }
]]></Implementation>
</Method>
</Class>


<Class name="XPort.Util.DynamicStatus">
<Abstract>1</Abstract>
<TimeCreated>65106,33092.700976</TimeCreated>

<Method name="ToDynamicObject">
<ClassMethod>1</ClassMethod>
<FormalSpec>status:%Status,*error:%DynamicObject=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set sc = $$$OK

  try {
    if $$$ISERR(status) {
      set exception = ##class(Frontier.Exception).CreateFromStatus(status)
      set error = ##class(Frontier.Exception).ToDynamicObject(exception)
      if $isobject(error) {
        if error.error '= "" set error = error.error        
        if error.errors '= "" set error = error.errors
      }
    }
  } catch err {
    set sc = err.AsStatus()
  }

  return sc
]]></Implementation>
</Method>
</Class>


<Class name="XPort.Util.FileRemover">
<Description>
This utility is used to handle file deletions from the server along with removing empty directories left by them.</Description>
<IncludeCode>portutils</IncludeCode>
<Super>%RegisteredObject</Super>
<TimeCreated>64744,50300.86048</TimeCreated>

<Property name="Entries">
<Type>%String</Type>
<Collection>list</Collection>
</Property>

<Property name="Statement">
<Type>%SQL.Statement</Type>
</Property>

<Property name="AppPathCache">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Method name="%OnNew">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ..Statement = ##class(%SQL.Statement).%New()
  do ..Statement.%PrepareClassQuery("%File", "FileSet")
  return $$$OK
]]></Implementation>
</Method>

<Method name="AddFileToRemoval">
<FormalSpec>filePath:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[  return ..Entries.Insert(##class(%File).NormalizeFilename(filePath))
]]></Implementation>
</Method>

<Method name="Run">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  for i=1:1:..Entries.Count() {
    set filePath = ..Entries.GetAt(i)
    set sc = ..Remove(filePath)
    if $$$ISERR(sc) return sc
  }
  return $$$OK
]]></Implementation>
</Method>

<Method name="Remove">
<FormalSpec>path:%String,hasContent:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    
  if path = ..GetWebApplicationPath(path) return $$$OK 
  
  // There's a bug when using Exists for directories, it seems to assume that a directory is also a file.
  // To workaround this, DirectoryExists is also applied because it WILL return 0.
  if '##class(%File).DirectoryExists(path) && ##class(%File).Exists(path) { 
    do ##class(%File).Delete(path) 
  } elseif hasContent = 0 { 
    do ##class(%File).RemoveDirectory(path)
  }
    
  set path = $piece(path, $$$OSSlash, 1, *-1)
  set r = ..Statement.%Execute(path)
  set hasContent = 0
    
  if r.%Next(.sc) {
    if $$$ISERR(sc) return sc
    set hasContent = 1
  }  
  return ..Remove(path, hasContent)
]]></Implementation>
</Method>

<Method name="RemoveOne">
<ClassMethod>1</ClassMethod>
<FormalSpec>filePath:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set remover = ..%New()
  $$$QuitOnError(remover.AddFileToRemoval(filePath))
  return remover.Run()
]]></Implementation>
</Method>

<Method name="GetWebApplicationPath">
<FormalSpec>filePath:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
     
  if ..AppPathCache '= "" return ..AppPathCache
  
  new $namespace 
  set $namespace = "%SYS"
  
  set rows = ##class(%SQL.Statement).%ExecDirect(, "SELECT TOP 1 Path FROM SECURITY.APPLICATIONS WHERE ? %STARTSWITH Path ORDER BY LEN(PATH) DESC", filePath)
  if rows.%Next() {
    set path = ##class(%File).NormalizeFilename(rows.%Get("Path"))
    set ..AppPathCache = path
    return path
  }
  return ""
]]></Implementation>
</Method>
</Class>


<Class name="XPort.Util.NamespaceCall">
<Abstract>1</Abstract>
<IncludeCode>xport</IncludeCode>
<TimeCreated>64754,39701.20307</TimeCreated>

<Method name="SetItemLock">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String,itemName:%String,lock:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  $$$ChangeNamespace(namespace)
  return ##class(%RoutineMgr).LockItem(itemName, lock)
]]></Implementation>
</Method>

<Method name="CompileList">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[namespace:%String,&compileList:%String="",qspec:%String="cku"]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  $$$ChangeNamespace(namespace)
  set compileErrors = 0

  set sc = $$$OK

  do $System.OBJ.CompileList(.compileList, qspec_"/nodisplay", .compileErrors)

  if compileErrors > 0 {
    for c=1:1:compileErrors {
      set sc = $$$ADDSC(sc, $$$ERROR(compileErrors(c, "code"), compileErrors(c)))
    }
    $$$QuitOnError(sc)
  }
  return $$$OK
]]></Implementation>
</Method>

<Method name="GetRoutine">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String,routineName:%String</FormalSpec>
<Implementation><![CDATA[
  $$$ChangeNamespace(namespace)
  set routine = ##class(%RoutineMgr).%OpenId(routineName)
  if '$isobject(routine) set routine = ##class(%RoutineMgr).%New(routineName)

  return routine
]]></Implementation>
</Method>

<Method name="DeleteItem">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String,itemName</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  $$$ChangeNamespace(namespace)
  return ##class(%RoutineMgr).Delete(itemName)
]]></Implementation>
</Method>

<Method name="ListProjects">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String</FormalSpec>
<ReturnType>%DynamicArray</ReturnType>
<Implementation><![CDATA[
  $$$ChangeNamespace(namespace)

  set projects = []

  set s = ##class(%SQL.Statement).%New()
  $$$ThrowOnError(s.%PrepareClassQuery("%Studio.Project", "ProjectList"))
  set c = s.%Execute()

  while c.%Next() {
    set name = c.%Get("Name")
    if name [ "Default" continue
    &sql(SELECT TOP 1 NAME into :item FROM %STUDIO.PROJECTITEM WHERE PROJECT = :name)
    set hasItems = $select(item '= "" : "true", 1: "false")
    do projects.%Push({ "name": (name), "has_items": (hasItems) })
  }

  return {
    "projects": (projects)
  }
]]></Implementation>
</Method>

<Method name="GetAllProjectItems">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String,projectName:%String</FormalSpec>
<ReturnType>%DynamicArray</ReturnType>
<Implementation><![CDATA[
  $$$ChangeNamespace(namespace)
  set items = []

  set s = ##class(%SQL.Statement).%New()
  $$$ThrowOnError(s.%PrepareClassQuery("%Studio.Project", "ProjectItemsList"))
  set r = s.%Execute(projectName)

  set itemList = ""
  set qualifiedClasses = ""

  while r.%Next(.sc) {
    $$$ThrowOnError(sc)
    set projectItemName = r.%Get("Name")
    set projectItemType = r.%Get("Type")
    $$$ThrowOnError(##class(%Studio.Project).NormalizeName(.projectItemName, .projectItemType))
    if projectItemType = "CLS" {
      // Defer the insert to after we check if there's any package to be expanded.
      set qualifiedClasses(projectItemName_".CLS") = 1
    } elseif projectItemType = "PKG" {
      $$$ThrowOnError($System.OBJ.GetPackageList(.pkgd, projectItemName))
      // Found a package, normalize the list and delete any entry that doesn't have the CLS extension.
      set n = "" for  set n = $order(pkgd(n), 1, v)  quit:n=""  continue:v  set pkgd(n_".CLS") = 1 kill pkgd(n)
      merge qualifiedClasses = pkgd
    } else {
      do items.%Push(projectItemName)
    }
  }

  // From this step onwards we won't face any repeated subscript, so we can add the classes safely.
  set name = ""
  for  set name = $order(qualifiedClasses(name)) quit:name=""  do items.%Push(name)

  return items
]]></Implementation>
</Method>

<Method name="GetProject">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String,name:%String,ignoreError:%Boolean=0</FormalSpec>
<ReturnType>%Studio.Project</ReturnType>
<Implementation><![CDATA[
  $$$ChangeNamespace(namespace)

  set project = ##class(%Studio.Project).%OpenId(name)
  if 'ignoreError $$$ThrowOnError(..AssertValidProject(name))
  return project
]]></Implementation>
</Method>

<Method name="CompileProject">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String,name:%String,qspec:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  $$$ChangeNamespace(namespace)

  $$$QuitOnError(..AssertValidProject(name, .project))
  return project.Compile(qspec)
]]></Implementation>
</Method>

<Method name="DeleteProject">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String,name:%String</FormalSpec>
<Implementation><![CDATA[
  $$$ChangeNamespace(namespace)

  $$$ThrowOnError(..AssertValidProject(name, .project))
  $$$ThrowOnError(##class(%Studio.Project).Delete(name))
]]></Implementation>
</Method>

<Method name="ExportProjectToXML">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String,name:%String</FormalSpec>
<ReturnType>%Stream.Object</ReturnType>
<Implementation><![CDATA[
  // Continuação.
  $$$ChangeNamespace(namespace)

  set tempFilename = ##class(%File).TempFilename("xml")

  $$$ThrowOnError(..AssertValidProject(name, .project))
  $$$ThrowOnError(project.Export(tempFilename, "/nodisplay/diffexport", 0,.errors, "RAW"))

  set input = ##class(%Stream.FileCharacter).%New()
  $$$ThrowOnError(input.LinkToFile(tempFilename))

  set output = ##class(%Stream.GlobalCharacter).%New()
  $$$ThrowOnError(output.CopyFrom(input))

  set input = ""
  do ##class(%File).Delete(tempFilename)

  return output
]]></Implementation>
</Method>

<Method name="GetDocumentReferences">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String,expression:%String,pattern:%String,includeSystemDocs:%Boolean=1,wholeWords:%Boolean=0,caseSensitive:%Boolean=0,max:%Integer=50,filter:%String="",wild:%Boolean=0</FormalSpec>
<ReturnType>%Stream.Object</ReturnType>
<Implementation><![CDATA[
  $$$ChangeNamespace(namespace)
  $$$ThrowOnError(##class(Frontier.Shared.Utilities).CallAndCapture("%Studio.Project", "FindInFiles", .output, expression, pattern, includeSystemDocs, wholeWords, caseSensitive, max, filter, wild))
  return output
]]></Implementation>
</Method>

<Method name="RetrieveItemSourceCode">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String,workspacePath:%String,itemName:%String</FormalSpec>
<ReturnType>%Stream.Object</ReturnType>
<Implementation><![CDATA[
  #dim stream As %Stream.GlobalCharacter
  set code = []

  set externalPath = ##class(Port.Util).MountItemSourcePath(itemName, workspacePath)
  set pathType = ##class(Port.Util).ExtractType(externalPath, workspacePath)

  if pathType = "CLS" {
    $$$ThrowOnError(##class(%Compiler.UDL.TextServices).GetTextAsStream(namespace, itemName, .content))
    set code = $$StreamToArray(content)
  } elseif ##class(Port.Util).IsRoutine(itemName) {
    $$$ChangeNamespace(namespace)
    set routine = ##class(%RoutineMgr).%OpenId(itemName)
    if '$isobject(routine) $$$ThrowStatus($$$ERROR($$$RoutineDoesNotExist, itemName))
    set code = $$StreamToArray(routine.Code)
  } else {
    set file = ##class(%Stream.FileCharacter).%New()
    set file.TranslateTable = "UTF8"
    $$$ThrowOnError(##class(Port.Util).CSPLogicalToPhysicalPath(itemName, .physicalPath, namespace))
    $$$ThrowOnError(file.LinkToFile(physicalPath))
    set code = $$StreamToArray(file)
  }

  return code

StreamToArray(stream)
  set array = []

  do stream.Rewind()

  while 'stream.AtEnd {
    do array.%Push(stream.ReadLine())
  }
  return array
]]></Implementation>
</Method>

<Method name="AssertValidProject">
<ClassMethod>1</ClassMethod>
<FormalSpec>name:%String,*project:%Studio.Project=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set project = ##class(%Studio.Project).%OpenId(name)
  if '$isobject(project) $$$ThrowStatus($$$ERROR($$$GeneralError, $$$FormatText("Project '%1' does not exist.", name)))
  return $$$OK
]]></Implementation>
</Method>
</Class>


<Routine name="xport" type="INC"><![CDATA[
#define StatusToException(%sc)  ##class(%Exception.StatusException).CreateFromStatus(%sc)
#define ContinueOnError(%sc) set sc = %sc continue:$$$ISERR(sc)
#define ReturnOnError(%sc) set sc = %sc return:$$$ISERR(sc) sc
#define AddAndContinue(%sc) set cSC = %sc set sc = $$$ADDSC(sc, cSC) continue:$$$ISERR(cSC)
#define ChangeNamespace(%ns) new $namespace try { set $namespace = %ns } catch ex { $$$ThrowStatus($$$ERROR($$$GeneralError, "Invalid namespace "_%ns_".")) }
#define CheckLegacySourceControl(%legacy) if %legacy = 1 $$$ThrowOnError(##class(%Studio.SourceControl.Interface).SourceControlCreate($username,"",.created,.flags,.username,"",.reaload,"",.iconStatus))
]]></Routine>


<Project name="xport" LastModified="2019-04-18 17:37:39.210953" Target="test^xporttest" TargetType="2" HttpServer="http://localhost:57772">
  <Items>
    <ProjectItem name="XPort.API" type="CLS"></ProjectItem>
    <ProjectItem name="XPort.API.Documents" type="CLS"></ProjectItem>
    <ProjectItem name="XPort.API.Project" type="CLS"></ProjectItem>
    <ProjectItem name="XPort.API.Projects" type="CLS"></ProjectItem>
    <ProjectItem name="XPort.API.Projects.Actions" type="CLS"></ProjectItem>
    <ProjectItem name="XPort.API.Projects.Items" type="CLS"></ProjectItem>
    <ProjectItem name="XPort.Util.DynamicStatus" type="CLS"></ProjectItem>
    <ProjectItem name="XPort.Util.FileRemover" type="CLS"></ProjectItem>
    <ProjectItem name="XPort.Util.NamespaceCall" type="CLS"></ProjectItem>
    <ProjectItem name="xport.INC" type="MAC"></ProjectItem>
    <ProjectItem name="xporttest.MAC" type="MAC"></ProjectItem>
  </Items>
  <BreakPoints>
    <BreakPoint Routine="Port.Util.CLS" Offset="CSPPhysicalToLogicalPath+7"></BreakPoint>
    <BreakPoint Routine="XPort.API.Projects.Items.CLS" Offset="GetItemPaths+2"></BreakPoint>
    <BreakPoint Routine="XPort.Util.NamespaceCall.CLS" Offset="GetAllProjectItems+4"></BreakPoint>
  </BreakPoints>
  <WatchVariables>
    <WatchVariable Variable="routine.Code.Size" Pane="1"></WatchVariable>
  </WatchVariables>
</Project>


<Routine name="xporttest" type="MAC" languagemode="0"><![CDATA[
test
  new agent, sc
  set agent = ##class(Forgery.Agent).%New()
  set sc = agent.Get({
    "url": "api/xport/namespaces/SAMPLES/documents/preview/bas/BASdatent1.bas",
    "headers": {
      "Authorization": ("Basic "_$System.Encryption.Base64Encode("_system:SYS"))
    }
  }, .d, 1)
  quit
]]></Routine>
</Export>
